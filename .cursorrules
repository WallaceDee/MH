# CBG爬虫项目开发规则

## 开发注意

### 测试、调试用文件，请创建在.\tests\ 目录下

### 直接帮我修改代码，不需要问我要不要帮我改，肯定是要你改的；

### py文件不要有Emoji表情

当前命令行工具PowerShell不支持&&语法，请分别执行命令;
退出命令行使用exit,不是q^D;
## 🎯 项目概述
这是一个梦幻西游CBG爬虫系统，采用Flask后端 + Vue.js前端的分离架构，包含数据爬取、处理、分析和展示功能。

## 🏗️ 架构原则

### 分层架构设计
- **展示层**: Vue.js + Element UI前端
- **接口层**: Flask RESTful API  
- **业务层**: Service类处理业务逻辑
- **数据层**: SQLite数据库 + 文件存储

### 项目结构
```
项目根目录/
├── web/                    # Vue.js前端项目
│   ├── src/api/            # 统一API封装层 ⭐
│   ├── src/components/     # 公共组件
│   └── src/views/          # 页面组件
├── src/                    # Python后端项目
│   ├── app/blueprints/     # Flask API蓝图
│   ├── app/controllers/    # 控制器层
│   ├── app/services/       # 服务层
│   └── evaluator/          # 装备估价系统
├── data/                   # 数据存储
└── .cursor/rules/          # 详细开发规则
```

## 🔧 Flask后端开发规则

### 应用架构
- 使用应用工厂模式创建Flask应用
- 蓝图模块化组织API路由
- 分层架构：Controller → Service → Model

### API设计规范
- RESTful API设计，使用HTTP动词
- 统一URL前缀：`/api/v1/`
- 统一响应格式：
```python
# 成功响应
{
    "code": 200,
    "data": {},
    "message": "success",
    "timestamp": 1234567890
}

# 分页响应
{
    "code": 200,
    "data": {
        "items": [],
        "total": 100,
        "page": 1,
        "page_size": 10
    }
}
```

### 错误处理
- 全局错误处理器统一处理异常
- 返回友好的错误信息给前端
- 详细的错误日志记录
- HTTP状态码要准确

### 代码规范
```python
@equipment_bp.route('/valuation', methods=['POST'])
def get_equipment_valuation():
    """获取装备估价"""
    try:
        data = request.get_json()
        if not data:
            return error_response("请提供装备数据")
        
        result = controller.get_equipment_valuation(data)
        return success_response(data=result, message="获取装备估价成功")
    except Exception as e:
        return error_response(f"获取装备估价失败: {str(e)}")
```

## 🎨 Vue.js前端开发规则

### 核心原则
**禁止组件直接使用axios，必须通过统一API层**

### API调用规范
```javascript
// ✅ 正确方式：使用统一API
const response = await this.$api.equipment.getEquipmentList(params)
if (response.code === 200) {
    this.equipments = response.items || response.data || []
    this.total = response.total || 0
}

// ❌ 错误方式：直接使用axios
import axios from 'axios'
const response = await axios.get('/api/v1/equipment/')
```

### 响应处理模式
- 响应拦截器自动处理数据格式化和错误提示
- 使用`response.code === 200`判断业务是否成功
- 分页数据使用`response.items`、`response.total`等字段

### 组件开发
- 使用Vue 2 + Element UI
- 组件名使用PascalCase命名
- 必须使用scoped样式
- 长列表使用分页或虚拟滚动

### 错误处理
```javascript
try {
    const response = await this.$api.equipment.getEquipmentList(params)
    if (response.code === 200) {
        // 成功处理
    } else {
        this.$notify.error({
          title: '提示',
          message: response.message || '操作失败'
        })
    }
} catch (error) {
    console.error('请求异常:', error)
}
```

## 🕷️ 爬虫开发规则

### 基础规范
- 遵守robots.txt协议
- 设置合理的请求间隔(1-3秒)
- 使用随机User-Agent池
- 实现请求重试机制

### 反爬虫应对
```python
# User-Agent池
USER_AGENTS = [
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
    # 更多UA...
]

# 代理IP支持
PROXIES = {
    'http': 'http://proxy:port',
    'https': 'https://proxy:port'
}

# 请求间隔
time.sleep(random.uniform(1, 3))
```

### 数据处理
- 数据清洗和验证
- 去重处理
- 结构化存储
- 增量更新策略

## 📊 数据处理规则

### 数据清洗
```python
import pandas as pd

# 处理缺失值
df.fillna(method='forward')
df.dropna(subset=['key_column'])

# 数据类型转换
df['date'] = pd.to_datetime(df['date'])
df['price'] = pd.to_numeric(df['price'], errors='coerce')
```

### 性能优化
- 使用pandas的向量化操作
- 避免循环处理大数据
- 合理使用内存
- 并行处理

### 数据存储
- 推荐使用Parquet格式存储大数据
- SQLite用于结构化查询
- 支持多种导出格式：CSV、Excel、JSON

## 🧪 测试规则

### 测试策略
- **单元测试**: 测试单个函数/方法
- **集成测试**: 测试模块间交互
- **端到端测试**: 测试完整用户流程

### 覆盖率要求
- 核心业务逻辑: 90%+
- API接口: 80%+
- 爬虫模块: 70%+
- 前端组件: 60%+

### Python测试
```python
import pytest

@pytest.fixture
def client():
    app = create_app(testing=True)
    return app.test_client()

def test_api_endpoint(client):
    response = client.get('/api/v1/equipment/')
    assert response.status_code == 200
    assert 'data' in response.json
```

## 🔍 代码质量规范

### Python代码规范
- 遵循PEP8代码风格
- 使用类型提示(Type Hints)
- 函数和类必须有docstring
- 使用logging记录日志，不使用print

### JavaScript代码规范
- 使用ES6+语法
- 变量使用camelCase命名
- 常量使用UPPER_CASE命名
- 避免使用var，优先使用const和let

### 注释规范
- 复杂逻辑必须添加注释
- API接口要有详细的参数说明
- 重要的业务逻辑要有注释解释

## 🚀 性能优化

### 前端性能
- 组件懒加载
- 路由分割
- 图片懒加载
- 合理使用v-if和v-show

### 后端性能
- 数据库查询优化
- 使用连接池
- 异步处理耗时操作
- 响应数据缓存

### 数据库优化
- 合理使用索引
- 避免N+1查询
- 分页查询大数据集
- 定期清理无用数据

## 🛡️ 安全规范

### API安全
- 参数验证和过滤
- SQL注入防护
- XSS攻击防护
- CORS跨域配置

### 数据安全
- 敏感数据加密存储
- 日志脱敏处理
- 文件访问权限控制
- 定期数据备份

## 📝 文档规范

### 代码文档
- API接口要有完整的文档说明
- 复杂算法要有实现原理说明
- 配置文件要有注释说明

### 项目文档
- README.md包含项目介绍和快速开始
- 部署文档说明环境要求和部署步骤
- 开发文档说明开发环境搭建

## 🔄 版本控制

### Git规范
- 使用有意义的commit信息
- 功能开发使用feature分支
- 代码review后才能合并到main分支
- 重要版本要打tag标记

### 分支策略
- main: 生产环境分支
- develop: 开发环境分支
- feature/*: 功能开发分支
- hotfix/*: 紧急修复分支

## 🎯 特殊规则提醒

### 前端API调用
⭐ **最重要**: 前端组件禁止直接使用axios，必须使用`this.$api.module.method()`统一API封装

### 装备估价系统
- 相似度计算要考虑装备类型、等级、属性等多个维度
- 估价算法要基于市场数据的统计分析
- 支持用户自定义相似度阈值和锚点数量

### 数据处理
- 爬虫数据要经过清洗和验证
- 支持增量更新，避免重复爬取
- 定期备份重要数据

遵循这些规则将确保项目代码质量、架构一致性和长期可维护性！ 