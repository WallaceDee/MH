// CBG爬虫助手面板脚本
class CBGPanel {
  constructor() {
    this.recommendData = []
    this.init()
  }

  init() {
    // 页面加载完成后的初始化
    document.addEventListener('DOMContentLoaded', () => {
      console.log('CBG爬虫助手面板已加载')
      this.bindEvents()
    })
  }

  bindEvents() {
    // 绑定按钮事件
    const clearBtn = document.querySelector('[data-action="clear"]')
    const testBtn = document.querySelector('[data-action="test"]')

    if (clearBtn) {
      clearBtn.addEventListener('click', () => this.clearData())
    }

    if (testBtn) {
      testBtn.addEventListener('click', () => this.testClick())
    }
  }

  // 测试点击事件
  testClick() {
    console.log('🧪 测试按钮被点击了！')
    console.log('📊 当前推荐数据:', this.recommendData || '无数据')

    // 显示当前数据状态
    const dataCount = this.recommendData ? this.recommendData.length : 0
    alert(`测试按钮工作正常！\n当前数据量: ${dataCount}\n请查看控制台获取详细日志`)
  }

  // 清空数据
  clearData() {
    try {
      console.log('清空数据...')
      chrome.runtime.sendMessage({
        action: 'clearRecommendData'
      })
      this.updateDataDisplay([])
      console.log('数据已清空')
    } catch (error) {
      console.error('清空数据失败:', error)
    }
  }

  // 更新数据显示
  updateDataDisplay(data) {
    const container = document.getElementById('data-container')

    if (!container) {
      console.error('找不到数据显示容器')
      return
    }

    console.log('🔄 更新数据显示，数据量:', data ? data.length : 0)

    if (!data || data.length === 0) {
      container.innerHTML = '<div class="no-data">暂无数据，请访问CBG网站</div>'
      return
    }

    let html = ''
    data.forEach((item, index) => {
      html += `
                <div class="data-item">
                    <div class="data-header">
                        请求 #${index + 1} - ${item.method} ${item.status}
                    </div>
                    <div class="data-url">${item.url}</div>
                    ${
                      item.responseData
                        ? `
                        <div class="data-response">${JSON.stringify(
                          item.responseData,
                          null,
                          2
                        )}</div>
                    `
                        : ''
                    }
                </div>
            `
    })

    container.innerHTML = html
  }

  // 显示调试器冲突警告
  showDebuggerWarning(message) {
    const container = document.getElementById('data-container')
    
    if (!container) {
      console.error('找不到数据显示容器')
      return
    }

    container.innerHTML = `
      <div style="background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 4px; padding: 15px; margin: 10px 0;">
        <div style="display: flex; align-items: center; margin-bottom: 10px;">
          <span style="font-size: 18px; margin-right: 8px;">⚠️</span>
          <strong style="color: #856404;">调试器冲突警告</strong>
        </div>
        <p style="margin: 0; color: #856404; font-size: 14px;">${message}</p>
        <div style="margin-top: 10px;">
          <button onclick="location.reload()" style="padding: 6px 12px; background: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer; margin-right: 8px;">
            重新加载页面
          </button>
          <button onclick="this.parentElement.parentElement.style.display='none'" style="padding: 6px 12px; background: #6c757d; color: white; border: none; border-radius: 4px; cursor: pointer;">
            关闭
          </button>
        </div>
      </div>
    `
  }
}

// 初始化面板
const panel = new CBGPanel()

// 监听数据更新
chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
  if (message.action === 'updateRecommendData') {
    console.log('📨 收到数据更新消息:', message.data)
    panel.recommendData = message.data
    panel.updateDataDisplay(message.data)
  } else if (message.action === 'showDebuggerWarning') {
    console.warn('调试器冲突警告:', message.message)
    panel.showDebuggerWarning(message.message)
  }
})
